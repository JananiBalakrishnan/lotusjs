{
  "name": "Lotusjs",
  "tagline": "WebDriverJS ",
  "body": "### Welcome to Lotus JS\r\n\r\nLOTUS JS is the project built with WebDriver JS customized with CommonUtils, Logger Functions with Data Driven Approach. It supports command line interface for different Browsers, `local` and `Sauce`.\r\n\r\nDownload the project from this link [LOTUS JS](https://github.com/jaanumahe/lotusjs).\r\n\r\n### npm \r\n\r\nNode package manager. It is a command-line utility for interacting with repository that aids in package installation, version management and dependency management\r\n\r\n### Mocha \r\n\r\nis a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases & Mocha allows you to use any assertion library you want, if it throws an error, it will work! This means you can utilize libraries such as: should, expect, chai.expect(), assert(), better-assert, unexpected. we can’t use the default Mocha methods, we need to use the WebDriverJS Testing Module if you’re using Mocha. Eg: var test = require('selenium-webdriver/testing'); test.describe('sample-test', function(){ )}; Also, mocha has a quite low maximum time it will allow a test to execute for before automatically failing. Hence have to call timeout - eg: const mochaTimeOut = 30000;\r\n\r\n### Gulp \r\n\r\nis a task runner used to automate/enhance workflows programmatically\r\n\r\n### WebdriverJS \r\n\r\nWebdriverJS\" is another name for selenium-webdriver, the official Node.JS implementation of theJSONWire (WebDriver Wire) Protocol by the Selenium team.\r\n\r\n### custom-logger \r\n\r\nlogging mechanism Simple yet highly customizable console logger for node.js integrated with colors to show different log levels - log, info, debug, warn, error.\r\n\r\n### xlsx-to-json \r\n\r\nConverting xlsx file to json files using nodejs\r\n\r\n### yargs \r\n\r\nhelps you build interactive command line tools by parsing arguments and generating an elegant user interface\r\n\r\n### npm commands\r\n`npm install`\r\n\r\n`local chrome: gulp test --remote=local --browser=chrome`\r\n\r\n`local safari: gulp test --remote=local --browser=safari`\r\n\r\n`local FF: gulp test --remote=local --browser=firefox`\r\n\r\n`Default run:(local/FF): gulp test`\r\n\r\n`Sauce chrome: gulp test --remote=sauce --browser=chrome`\r\n\r\n`Sauce firefox: gulp test --remote=sauce --browser=firefox`\r\n\r\n`Sauce safari: gulp test --remote=sauce --browser=safari`\r\n\r\n`Mocha run(picks default tests under test folder): mocha`\r\n\r\n`Mocha along with reporter: mocha -R good-mocha-html-reporter`\r\n\r\n`npm: ./node_modules/gulp/bin/gulp.js`\r\n\r\n`npm mocha: ./node_modules/mocha/bin/mocha`\r\n\r\n\r\nsonar\r\ngulp sonar\r\nTo see Report - Follow console or launch `http://localhost:9000`\r\n\r\n\r\n### Authors and Contributors\r\nMahen (@jaanumahe)\r\n\r\n### Support or Contact\r\nHaving trouble with Project? Please leave a comment.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}